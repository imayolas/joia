generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String   @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@unique([identifier, token])
}

model User {
    id                   String              @id @default(cuid())
    name                 String?
    username             String?             @unique
    email                String?             @unique
    emailVerified        DateTime?
    image                String?
    defaultModel         String?
    createdAt            DateTime            @default(now())
    updatedAt            DateTime            @updatedAt
    accounts             Account[]
    posts                Post[]
    sessions             Session[]
    workspaces           UsersOnWorkspaces[]
    authoredChats        Chat[]
    workspaceInvitesSent WorkspaceInvite[]
    postsMeta            PostsOnUsers[]
    sharedTargets        ShareTarget[]
    sharingTargets       ShareTarget[]       @relation("sharingUser")
}

model Workspace {
    id               String              @id @default(cuid())
    name             String
    createdAt        DateTime            @default(now())
    updatedAt        DateTime            @updatedAt
    users            UsersOnWorkspaces[]
    posts            Post[]
    workspaceInvites WorkspaceInvite[]
    aiProvider       AiProvider[]
}

model UsersOnWorkspaces {
    id          String    @id @default(cuid())
    userId      String
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    workspaceId String
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    @@unique([userId, workspaceId])
}

model WorkspaceInvite {
    id          String        @id @default(cuid())
    email       String
    token       String
    source      String        @default("direct")
    invitedById String
    invitedBy   User          @relation(fields: [invitedById], references: [id], onDelete: Cascade)
    workspaceId String
    workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    ShareTarget ShareTarget[]

    @@unique([email, workspaceId])
    @@index([token])
    @@index([email])
}

model Post {
    id                 String              @id @default(cuid())
    title              String?
    emoji              String?
    userId             String
    workspaceId        String
    type               String?
    isDefault          Boolean             @default(false)
    isDemo             Boolean             @default(false)
    gptEngine          String?
    createdAt          DateTime            @default(now())
    updatedAt          DateTime            @updatedAt
    user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
    workspace          Workspace           @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    chats              Chat[]
    postConfigVersions PostConfigVersion[]
    shares             Share[]
    usersMeta          PostsOnUsers[]
}

model PostsOnUsers {
    id            String    @id @default(cuid())
    userId        String
    user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    postId        String
    post          Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
    position      Int?
    pinnedAt      DateTime?
    lastVisitedAt DateTime?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt

    @@unique([userId, postId])
}

model Share {
    id           String        @id @default(cuid())
    postId       String        @unique
    scope        String
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
    post         Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
    shareTargets ShareTarget[]
}

model ShareTarget {
    id                String           @id @default(cuid())
    shareId           String
    sharerId          String
    userId            String?
    workspaceInviteId String?
    accessLevel       String
    createdAt         DateTime         @default(now())
    updatedAt         DateTime         @updatedAt
    share             Share            @relation(fields: [shareId], references: [id], onDelete: Cascade)
    sharer            User             @relation("sharingUser", fields: [sharerId], references: [id], onDelete: Cascade)
    user              User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
    workspaceInvite   WorkspaceInvite? @relation(fields: [workspaceInviteId], references: [id], onDelete: Cascade)

    // @@unique([shareId, userId])
    // @@unique([shareId, workspaceInviteId])
    @@index(workspaceInviteId)
}

model Chat {
    id                  String             @id @default(cuid())
    postId              String
    title               String?
    post                Post               @relation(fields: [postId], references: [id], onDelete: Cascade)
    postConfigVersionId String?
    postConfigVersion   PostConfigVersion? @relation(fields: [postConfigVersionId], references: [id], onDelete: Cascade)
    authorId            String?
    author              User?              @relation(fields: [authorId], references: [id])
    messages            Message[]
    createdAt           DateTime           @default(now())
    updatedAt           DateTime           @updatedAt
    chatRuns            ChatRun[]
}

model Message {
    id                  String             @id @default(cuid())
    chatId              String?
    chat                Chat?              @relation(fields: [chatId], references: [id], onDelete: Cascade)
    postConfigVersionId String?
    postConfigVersion   PostConfigVersion? @relation(fields: [postConfigVersionId], references: [id], onDelete: Cascade)
    message             String?
    author              String
    tokens              Int?
    createdAt           DateTime           @default(now())
    updatedAt           DateTime           @updatedAt
    chatRunMessage      ChatRunMessage[]
}

model PostConfigVersion {
    id          String    @id @default(cuid())
    postId      String
    post        Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
    description String?
    model       String
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    chats       Chat[]
    messages    Message[]
}

model ChatRun {
    id                            String           @id @default(cuid())
    chatId                        String
    chat                          Chat             @relation(fields: [chatId], references: [id], onDelete: Cascade)
    requestTokens                 Int?
    responseTokens                Int?
    requestTokensCostInNanoCents  Int?
    responseTokensCostInNanoCents Int?
    createdAt                     DateTime         @default(now())
    updatedAt                     DateTime         @updatedAt
    chatRunMessages               ChatRunMessage[]
}

model ChatRunMessage {
    id        String  @id @default(cuid())
    chatRunId String
    chatRun   ChatRun @relation(fields: [chatRunId], references: [id], onDelete: Cascade)
    messageId String
    message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

model AiProvider {
    id          String               @id @default(cuid())
    slug        String
    name        String
    workspaceId String
    createdAt   DateTime             @default(now())
    updatedAt   DateTime             @updatedAt
    keyValues   AiProviderKeyValue[]
    aiModels    AiProviderModel[]
    workspace   Workspace            @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

    @@unique([workspaceId, slug])
}

model AiProviderKeyValue {
    id           String     @id @default(cuid())
    aiProviderId String
    key          String
    value        String /// @encrypted
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
    aiProvider   AiProvider @relation(fields: [aiProviderId], references: [id], onDelete: Cascade)

    @@unique([aiProviderId, key])
}

model AiProviderModel {
    id           String     @id @default(cuid())
    aiProviderId String
    slug         String
    isEnabled    Boolean    @default(false)
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
    aiProvider   AiProvider @relation(fields: [aiProviderId], references: [id], onDelete: Cascade)

    @@unique([aiProviderId, slug])
}
